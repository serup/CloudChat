TEST=./DDNode_test
TESTFLAGS= --report_format=XML --report_level=detailed
TESTFLAGS2= --report_level=detailed
TESTFLAGS3= --report_format=XML --report_level=detailed
CONVERT=xsltproc -o test_results.html test_results.xslt test_results.xml
CONVERT2=xsltproc -o test_results.txt test_results_text.xslt test_results.xml
CCTEST=g++ -g -o DDNode_test DDNode_test.cpp mockRPCServer.h mockRPCServer.cpp ServerRequestHandling.h ServerRequestHandling.cpp RPCclient.cpp RPCclient.h DDNode.cpp DDDfs_clnt.cpp DDDfs_xdr.cpp  DDDfs_server.cpp ../../../DataEncoderDecoder/DataEncoderDecoder/DataEncoder.h ../../../DataEncoderDecoder/DataEncoderDecoder/DataEncoder.cpp ../../../DataEncoderDecoder/DataEncoderDecoder/compression-lib/compression.h ../../../DataEncoderDecoder/DataEncoderDecoder/compression-lib/compression.cpp -L"/usr/local/lib/" -D__DEBUG__ -D__MSABI_LONG=long -lboost_system -lboost_signals -lboost_thread -lboost_filesystem -lpthread -lrt -std=gnu++11
init:
	@echo "------------------------------------------------------"
	@echo " Build RPC server/client for DDD file system "
	@echo "------------------------------------------------------"
	@echo " - make setup    : will generate and rename files"
	@echo " - make all      : build all"
	@echo " - make clean    : remove all object files"
	@echo " - make destroy  : destroy all (autogenerated files)"
	@echo "------------------------------------------------------"

setup:	generate prereq

generate:
	@echo "auto generate .c files"
	@rpcgen -Na DDDfs.x
prereq:
	@echo "- then rename all .c to .cpp"
	@sleep 1
	@rename 's/\.c/\.cpp/' *.c 
	@echo "- then rename all .c to .cpp in Makefile.DDDfs"
	@sed -i 's/\.c/\.cpp/g' Makefile.DDDfs
	@sed -i 's/RPCGENFLAGS =/CC = g++ -g \.\.\/\.\.\/\.\.\/DataEncoderDecoder\/DataEncoderDecoder\/DataEncoder.h \.\.\/\.\.\/\.\.\/DataEncoderDecoder\/DataEncoderDecoder\/DataEncoder.cpp \.\.\/\.\.\/\.\.\/DataEncoderDecoder\/DataEncoderDecoder\/compression-lib\/compression.h \.\.\/\.\.\/\.\.\/DataEncoderDecoder\/DataEncoderDecoder\/compression-lib\/compression.cpp -L\"\/usr\/local\/lib\/\" -D__DEBUG__ -D__MSABI_LONG=long -lboost_system -lboost_signals -lboost_thread -lboost_filesystem -lpthread -lrt -std=gnu++11 \
	\
	CCSERVER = g++ -g DDNode.cpp DDDfs_svc.cpp DDDfs_server.cpp DDDfs_xdr.cpp \.\.\/\.\.\/\.\.\/DataEncoderDecoder\/DataEncoderDecoder\/DataEncoder.h \.\.\/\.\.\/\.\.\/DataEncoderDecoder\/DataEncoderDecoder\/DataEncoder.cpp \.\.\/\.\.\/\.\.\/DataEncoderDecoder\/DataEncoderDecoder\/compression-lib\/compression.h \.\.\/\.\.\/\.\.\/DataEncoderDecoder\/DataEncoderDecoder\/compression-lib\/compression.cpp -L\"\/usr\/local\/lib\/\" -D__DEBUG__ -D__MSABI_LONG=long -lboost_system -lboost_signals -lboost_thread -lboost_filesystem -lpthread -lrt -std=gnu++11 \
       \ CCCLIENT = g++ -g DDDfs_clnt.cpp DDDfs_client.cpp DDDfs_xdr.cpp \.\.\/\.\.\/\.\.\/DataEncoderDecoder\/DataEncoderDecoder\/DataEncoder.h \.\.\/\.\.\/\.\.\/DataEncoderDecoder\/DataEncoderDecoder\/DataEncoder.cpp \.\.\/\.\.\/\.\.\/DataEncoderDecoder\/DataEncoderDecoder\/compression-lib\/compression.h \.\.\/\.\.\/\.\.\/DataEncoderDecoder\/DataEncoderDecoder\/compression-lib\/compression.cpp -L\"\/usr\/local\/lib\/\" -D__DEBUG__ -D__MSABI_LONG=long -lboost_system -lboost_signals -lboost_thread -lboost_filesystem -lpthread -lrt -std=gnu++11 /g' Makefile.DDDfs
	@sed -i '/$$(SERVER) :/d' Makefile.DDDfs
	@sed -i '/$$(LINK.cpp) -o $$(SERVER)/d' Makefile.DDDfs
	@sed -i '/$$(LINK.cpp) -o/a $$(SERVER) : \
		$$(CCSERVER) -o $$(SERVER)' Makefile.DDDfs
	@sed -i '/$$(CLIENT) :/d' Makefile.DDDfs
	@sed -i '/$$(LINK.cpp) -o $$(CLIENT)/d' Makefile.DDDfs
	@sed -i '/$$(CCSERVER) -o $$(SERVER)/a $$(CLIENT) : \
		$$(CCCLIENT) -o $$(CLIENT)' Makefile.DDDfs
	@sed -i '/#include/a\#include \"DDNode.h\"\
		\
		using namespace DDDfsRPC;\
		' DDDfs_server.cpp
	@sed -i '/static DEDBlock /a\	dddfsServer* pserver = new dddfsServer();' DDDfs_server.cpp
	@sed -i '/dddfsServer();/a\ 	presult = pserver->handleRequest(arg1);\' DDDfs_server.cpp
	@sed -i 's/static DEDBlock  result/DEDBlock* presult/g' DDDfs_server.cpp
	@sed -i 's/return &result/return presult/g' DDDfs_server.cpp
	@sed -i '/#include /a\#include \"DED.h\"\
	#include \"dummyrequest.h\"' DDDfs_client.cpp
	@sed -i 's/DDRequest dddfs_1_arg1;/DDRequest dddfs_1_arg1 = createDummyDDRequest();/' DDDfs_client.cpp
	@sed -i 's/DDRequest ddnode_1_arg1;/DDRequest ddnode_1_arg1 = createDummyDDRequest();/' DDDfs_client.cpp
	@sed -i '/exit (1);\	}/a\	DED_PUT_DATA_IN_DECODER(decoder_ptr,(unsigned char*)result_1->data.data_val,result_1->data.data_len);' DDDfs_client.cpp
	@sed -i '/result_1 = dddfs_1(dddfs_1_arg1, clnt);/a\
		if (result_1 != (DEDBlock *) NULL) {\
			DED_PUT_DATA_IN_DECODER(decoder_ptr,(unsigned char*)result_1->data.data_val,result_1->data.data_len); \
			handleResponse(decoder_ptr); \/\/ decode message\
		}' DDDfs_client.cpp
	@
	@echo "- and you can now compile and link using :  make all"
 
all:	clean
	@echo "Building..."
	@make -f Makefile.DDDfs > build.log 
	@echo "Done. - see detailed info in build.log"

test:
	@ $(CCTEST)
	@ $(TEST) $(TESTFLAGS) > error.txt;$(CONVERT) 
	@ $(TEST) $(TESTFLAGS3) > error2.txt;$(CONVERT2) 
	@ echo "-----------------------------------------------" > test_txt_result.txt 
	@ echo " Test of DDNode  " >> test_txt_result.txt  
	@ echo "-----------------------------------------------" >> test_txt_result.txt 
	@ cat test_results.txt | grep 'OK\|FAIL' >> test_txt_result.txt
	@ echo "--------------" >> test_txt_result.txt
	@ echo "Tests Complete" >> test_txt_result.txt
	@ echo "--------------" >> test_txt_result.txt
	@ printf "Passed: " >> test_txt_result.txt;(cat test_results.txt | grep -c 'OK'; printf "") >> test_txt_result.txt
	@ printf "Failed: " >> test_txt_result.txt;(cat test_results.txt | grep -c 'FAIL'; printf "") >> test_txt_result.txt
	@ echo "--------------" >> test_txt_result.txt
	@ cat test_txt_result.txt > test_results.txt
	@ echo " " >> test_results.txt                       
	@ echo "- list of errors if any" >> test_results.txt 
	@ cat error2.txt >> test_results.txt                 
	@ cat test_results.txt                               
	@ rm test_txt_result.txt                             
	@ rm error2.txt                                      


.PHONY: init 

clean:
	@echo "- Removing obj and exe files"
	-@rm *.o > tmp
	-@rm DDDfs_server DDDfs_client DDNode_test test_results.txt test_results.xml test_results.html > tmp
	-@rm tmp

destroy:
	@echo "destroy setup - go back to default"
	@make -f Makefile.DDDfs clean > tmp
	-@rm Makefile.DDDfs > tmp
	-@rm tmp
	-@rm *.log
	-@rm test_results.txt
	-@rm test_results.xml
	-@rm test_results.html
	-@rm error.txt
